%--------------------------------------------------------------------------
%Descripci�n: Matriz masa viga 3D recta Coordenadas locales
%--------------------------------------------------------------------------
%Input:     - 
%--------------------------------------------------------------------------
%Output:    - 
%--------------------------------------------------------------------------
%Notas:     - v,w = f(N1,N2,N3,N4)
%--------------------------------------------------------------------------
% Written      Sep 14 2016 by V. Araya      victor.araya@alumnos.usm.cl
% Last revised Sep 14 2016 by V. Araya      victor.araya@alumnos.usm.cl
%--------------------------------------------------------------------------

function m = m_frame3D_mrHRZ1(rho,A,J,nod)
    %Nodos de integracion (3)
%         ri = [-sqrt(3/5),        0  ,   sqrt(3/5)];
%         wi = [5/9       ,      8/9  ,         5/9];
    %Nodos de integracion (2)
        ri = [-sqrt(1/3), sqrt(1/3)];
        wi = [1,1];
    %Largo
        xi = nod(1,:);
        xj = nod(2,:);
        L  = sqrt((xj - xi)*(xj - xi)');
%--------------------------------------------------------------------------
% Integraci�n Gaussiana (3)
%--------------------------------------------------------------------------
    m = zeros(14,14);
    for i = 1:length(ri);
        %Evaluar funci�n de forma
            [MN,~] = f_N(ri(i));
        %Evaluar funciones b
            Nu = f_Nu(MN);
            Nv = f_Nv(MN,L);
            Nw = f_Nw(MN,L);
            Nt = f_t(MN);
        %Suma a rigidez    
            m = m + wi(i)*(Nu'*rho*A*Nu + ...
                           Nv'*rho*A*Nv + ...
                           Nw'*rho*A*Nw + ...
                           Nt'*rho*J*Nt)*(L/2);    
    end
    
    % Diagonalización para HRZ
%     m = m(1:12,1:12) - m(1:12,13:14)*(m(13:14,13:14)\m(13:14,1:12));
    m = m(1:12,1:12);
    % #### Optimizar
    Sx = (m(1,1) + m(7,7))/(rho*A*L);
    m([1,4,7,10],[1,4,7,10]) = m([1,4,7,10],[1,4,7,10])/Sx; 
%     Sy = (m(2,2) + m(8,8))/(rho*A*L);
%     m([2,5,8,11],[2,5,8,11]) = m([2,5,8,11],[2,5,8,11])/Sy; 
%     Sz = (m(3,3) + m(9,9))/(rho*A*L);
%     m([3,6,9,12],[3,6,9,12]) = m([3,6,9,12],[3,6,9,12])/Sz; 
    Sy = (m(2,2) + m(8,8))/(rho*A*L);
    m([2,6,8,12],[2,6,8,12]) = m([2,6,8,12],[2,6,8,12])/Sy; 
    
    Sz = (m(3,3) + m(9,9))/(rho*A*L);
    m([3,5,9,11],[3,5,9,11]) = m([3,5,9,11],[3,5,9,11])/Sz; 
    
    m = diag(diag(m));
    
    
    
% END Main Function
%--------------------------------------------------------------------------    
    
%--------------------------------------------------------------------------
% Funciones de forma
%--------------------------------------------------------------------------
    function [MN,MdN_dr] = f_N(r)
        %Se evaluan las funciones de formam_frame3D_mrHRZ1
        %   r     : vector columna
        %   MN    : [r x 4]
        %   MNh_dr: [r x 4]

        % Shape function
            N1 = (1/2)*(1 - r);
            N2 = (1/2)*(1 + r);
            N3 = 1 -r.^2;
            N4 = r.*(1-r.^2);

            MN = [N1,N2,N3,N4];

        % Derivadas
            dN1_dr = (1/2)*(-1);
            dN2_dr = (1/2)*( 1);
            dN3_dr = -2*r;
            dN4_dr = 1 - 3*r.^2;
            
            MdN_dr = [dN1_dr,dN2_dr,dN3_dr,dN4_dr]; 
    return
%--------------------------------------------------------------------------
% u
%--------------------------------------------------------------------------
    function Nu = f_Nu(MN)
        % Desplazamiento u
            Nu = [MN(1),0,0,0,0,0,   MN(2),0,0,0,0,0,    0,0];
    return
%--------------------------------------------------------------------------
% v
%--------------------------------------------------------------------------
    function Nv = f_Nv(MN,L)
        % Desplazamiento v
            Nv = [0,MN(1),0,0,0,MN(3)*L/8,   0,MN(2),0,0,0,-MN(3)*L/8,    0,MN(4)*L/6];
%             Nv = [0,MN(1),0,0,0,-MN(3)*L/8,   0,MN(2),0,0,0,MN(3)*L/8,    0,-MN(4)*L/6];
    return
%--------------------------------------------------------------------------
% w
%--------------------------------------------------------------------------
    function Nw = f_Nw(MN,L)
        % Desplazamiento w
            Nw = [0,0,MN(1),0,-MN(3)*L/8,0,   0,0,MN(2),0,MN(3)*L/8,0,    -MN(4)*L/6,0];
%             Nw = [0,0,MN(1),0,MN(3)*L/8,0,   0,0,MN(2),0,-MN(3)*L/8,0,    MN(4)*L/6,0];
    return
%--------------------------------------------------------------------------
% t
%--------------------------------------------------------------------------
    function Nt = f_t(MN)
        % Torsion
            Nt = [0,0,0,MN(1),0,0,   0,0,0,MN(2),0,0,    0,0];
    return